Lien => https://kata-log.rocks/mars-rover-kata

Incremental Kata - no peeping ahead!
This is an incremental kata to simulate a real business situation: work your way through the steps in order, but do not read the next requirement before you have finished your current one.
Your Task
You’re part of the team that explores Mars by sending remotely controlled vehicles to the surface of the planet. Develop an API that translates the commands sent from earth to instructions that are understood by the rover.

Requirements
You are given the initial starting point (x,y) of a rover and the direction (N,S,E,W) it is facing.
The rover receives a character array of commands.
Implement commands that move the rover forward/backward (f,b).
Implement commands that turn the rover left/right (l,r).
Implement wrapping at edges. But be careful, planets are spheres.
Implement obstacle detection before each move to a new square. If a given sequence of commands encounters an obstacle, the rover moves up to the last possible point, aborts the sequence and reports the obstacle.
Rules
Hardcore TDD. No Excuses!
Change roles (driver, navigator) after each TDD cycle.
No red phases while refactoring.
Be careful about edge cases and exceptions. We can not afford to lose a mars rover, just because the developers overlooked a null pointer.

FR

Kata incrémental - pas de triche à l'avance !
Ceci est un kata incrémental pour simuler une situation commerciale réelle : avancez étape par étape, mais ne lisez pas la prochaine exigence avant d'avoir terminé la précédente.
Votre tâche
Vous faites partie de l'équipe qui explore Mars en envoyant des véhicules télécommandés à la surface de la planète. Développez une API qui traduit les commandes envoyées de la Terre en instructions comprises par le rover.

Exigences
On vous donne le point de départ initial (x, y) d'un rover et la direction (N, S, E, W) vers laquelle il fait face.
Le rover reçoit un tableau de caractères représentant les commandes.
Implémentez des commandes qui déplacent le rover vers l'avant/en arrière (f, b).
Implémentez des commandes qui font tourner le rover à gauche/droite (l, r).
Implémentez le rebondissement aux bords. Mais attention, les planètes sont des sphères.
Implémentez la détection d'obstacles avant chaque déplacement vers une nouvelle case. Si une séquence donnée de commandes rencontre un obstacle, le rover se déplace jusqu'au dernier point possible, abandonne la séquence et signale l'obstacle.
Règles
TDD hardcore. Pas d'excuses !
Changez de rôle (conducteur, navigateur) après chaque cycle TDD.
Pas de phases rouges lors du refactoring.
Soyez prudent en ce qui concerne les cas limites et les exceptions. Nous ne pouvons pas nous permettre de perdre un rover martien simplement parce que les développeurs ont négligé un pointeur null.