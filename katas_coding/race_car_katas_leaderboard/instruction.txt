Lien => https://kata-log.rocks/race-car-katas-leaderboard

The Situation
You just started your new job as a developer at the Ferrari Formula1 team. But you’re not really convinced by the legacy code-base. Now you want to write unit tests for them, and that is harder than it needs to be. The code snippet fails to follow one or more of the SOLID principles.

For this exercise, you should identify which SOLID principles are violated. There is only one class you are interested in writing tests for right now. As a first step, try to get some kind of test in place before you change the class at all. If the tests are hard to write, is that because of the problems with SOLID principles?

When you have some kind of test to lean on, refactor the code and make it testable. Take care when refactoring not to alter the functionality, or change interfaces which other client code may rely on. (Imagine there is client code in another repository that you can’t see right now). Add more tests to cover the functionality of the particular class you’ve been asked to get under test.

Apply the unit testing style and framework you are most comfortable with. You can choose to use stubs or mocks or none at all. If you do, you are free to use the mocking tool that you prefer.

Your Task
Write the unit tests for the Leaderboard class, including races with self driving cars. The Leaderboard calculates driver points and rankings based on results from a number of races.

FR

La Situation
Vous venez de commencer votre nouveau travail en tant que développeur dans l'équipe de Formule 1 de Ferrari. Cependant, vous n'êtes pas vraiment convaincu par le code hérité. Maintenant, vous souhaitez écrire des tests unitaires pour eux, et c'est plus difficile que nécessaire. L'extrait de code ne suit pas un ou plusieurs des principes SOLID.

Pour cet exercice, vous devez identifier quels principes SOLID sont violés. Il n'y a qu'une seule classe qui vous intéresse pour écrire des tests pour le moment. En tant que première étape, essayez de mettre en place un test quelconque avant de modifier la classe en rien du tout. Si les tests sont difficiles à écrire, est-ce à cause des problèmes avec les principes SOLID ?

Lorsque vous avez un genre de test sur lequel vous pouvez vous appuyer, refactorez le code et rendez-le testable. Faites attention lors de la refacturation de ne pas altérer la fonctionnalité ou modifier les interfaces sur lesquelles d'autres codes clients peuvent dépendre. (Imaginez qu'il y a du code client dans un autre référentiel que vous ne pouvez pas voir pour le moment). Ajoutez plus de tests pour couvrir la fonctionnalité de la classe particulière que vous avez été invité à mettre sous test.

Appliquez le style et le framework de tests unitaires avec lesquels vous êtes le plus à l'aise. Vous pouvez choisir d'utiliser des stubs, des mocks ou aucun. Si vous en utilisez, vous êtes libre d'utiliser l'outil de mock que vous préférez.

Votre tâche
Écrivez les tests unitaires pour la classe Leaderboard, y compris les courses avec des voitures autonomes. Le Leaderboard calcule les points et les classements des pilotes en fonction des résultats de plusieurs courses.