Lien => https://kata-log.rocks/task-list-kata

Task List
This is an example of code obsessed with primitives.

A primitive is any concept technical in nature, and not relevant to your business domain. This includes integers, characters, strings, and collections (lists, sets, maps, etc.), but also things like threads, readers, writers, parsers, exceptions, and anything else purely focused on technical concerns. By contrast, the business concepts in this project, “task”, “project”, etc. should be considered part of your domain model. The domain model is the language of the business in which you operate, and using it in your code base helps you avoid speaking different languages, helping you to avoid misunderstandings. In our experience, misunderstandings are the biggest cause of bugs.

Exercise
Try implementing the following features, refactoring primitives away as you go. Try not to implement any new behaviour until the code you’re about to change has been completely refactored to remove primitives, i.e. Only refactor the code you’re about to change, then make your change. Don’t refactor unrelated code.

One set of criteria to identify when primitives have been removed is to only allow primitives in constructor parameter lists, and as local variables and private fields. They shouldn’t be passed into methods or returned from methods. The only exception is true infrastructure code—code that communicates with the terminal, the network, the database, etc. Infrastructure requires serialisation to primitives, but should be treated as a special case. You could even consider your infrastructure as a separate domain, technical in nature, in which primitives are the domain.

You should try to wrap tests around the behaviour you’re refactoring. At the beginning, these will mostly be high-level system tests, but you should find yourself writing more unit tests as you proceed.

Features
Deadlines
Give each task an optional deadline with the deadline <ID> <date> command.
Show all tasks due today with the today command.
Customisable IDs
Allow the user to specify an identifier that’s not a number.
Disallow spaces and special characters from the ID.
Deletion
Allow users to delete tasks with the delete <ID> command.
Views
View tasks by date with the view by date command.
View tasks by deadline with the view by deadline command.
Don’t remove the functionality that allows users to view tasks by project, but change the command to view by project.
Get the Code
On GitHub (This kata can be done using C#, Go, Java, Kotlin, Python, Ruby, Scala, TypeScript) If your favorite language is missing, feel free to create a pull request. Be sure the maintainer will be happy ;-)

Considerations and Approaches
Think about behaviour attraction. Quite often, you can reduce the amount of behaviour that relies upon primitives from the outside world (as opposed to internal primitives stored as private fields or locals) simply by moving the behaviour to a value object which holds the primitives. If you don’t have a value object, create one. These value objects are known as behaviour attractors because once they’re created, they make it far more obvious where behaviour should live.

A related principle is to consider the type of object you’ve created. Is it a true value object (or record), which simply consists of getFoo methods that return their internal primitives (to be used only with infrastructure, of course), or is it an object with behaviour? If it’s the latter, you should avoid exposing any internal state at all. The former should not contain any behaviour. Treating something as both a record and an object generally leads to disaster.

Your approach will depend on whether you learn toward a functional or an object-oriented style for modelling your domain. Both encourage encapsulation, but information hiding techniques are generally only used in object-oriented code. They also differ in the approach used to extract behaviour; functional programming often works with closed sets of behaviour through tagged unions, whereas in object-oriented code, we use polymorphism to achieve the same ends in an open, extensible manner.

Separate your commands and queries. Tell an object to do something, or ask it about something, but don’t do both.

Lastly, consider SOLID principles when refactoring:

Aim to break large chunks of behaviour into small ones, each with a single responsibility.
Think about the dimensions in which it should be easy to extend the application.
Don’t surprise your callers. Conform to the interface.
Segregate behaviour based upon the needs.
Depend upon abstractions.

FR

Liste des tâches
Ceci est un exemple de code obsédé par les primitives.

Une primitive est toute notion technique, non pertinente pour votre domaine métier. Cela inclut les entiers, les caractères, les chaînes et les collections (listes, ensembles, cartes, etc.), mais aussi des choses comme les threads, les lecteurs, les écrivains, les analyseurs, les exceptions et tout ce qui est purement axé sur les préoccupations techniques. En revanche, les concepts métier dans ce projet, tels que "tâche", "projet", etc., doivent être considérés comme faisant partie de votre modèle métier. Le modèle métier est le langage de l'entreprise dans lequel vous opérez, et l'utiliser dans votre code vous aide à éviter de parler des langues différentes, ce qui vous permet d'éviter les malentendus. À notre avis, les malentendus sont la principale cause de bogues.

Exercice
Essayez de mettre en œuvre les fonctionnalités suivantes, en refactorant les primitives au fur et à mesure. Essayez de ne pas implémenter de nouveau comportement tant que le code que vous vous apprêtez à changer n'a pas été complètement refactoré pour supprimer les primitives, c'est-à-dire ne refactorisez que le code que vous vous apprêtez à changer, puis apportez votre modification. Ne refactorez pas le code non lié.

Un ensemble de critères pour identifier quand les primitives ont été supprimées est de n'autoriser les primitives que dans les listes de paramètres du constructeur, et en tant que variables locales et champs privés. Elles ne doivent pas être passées dans des méthodes ni renvoyées par des méthodes. La seule exception est le code d'infrastructure réel - le code qui communique avec le terminal, le réseau, la base de données, etc. L'infrastructure nécessite une sérialisation vers des primitives, mais elle doit être traitée comme un cas particulier. Vous pourriez même considérer votre infrastructure comme un domaine séparé, technique par nature, dans lequel les primitives sont le domaine.

Vous devriez essayer d'encadrer les tests autour du comportement que vous refactorisez. Au début, il s'agira principalement de tests système de haut niveau, mais vous devriez vous retrouver à écrire davantage de tests unitaires au fur et à mesure que vous avancez.

Fonctionnalités
Délais
Donnez à chaque tâche une date limite optionnelle avec la commande deadline <ID> <date>.
Affichez toutes les tâches dues aujourd'hui avec la commande today.
IDs personnalisables
Permettez à l'utilisateur de spécifier un identifiant qui n'est pas un nombre.
Interdisez les espaces et les caractères spéciaux dans l'ID.
Suppression
Permettez aux utilisateurs de supprimer des tâches avec la commande delete <ID>.
Vues
Affichez les tâches par date avec la commande view by date.
Affichez les tâches par date limite avec la commande view by deadline.
Ne supprimez pas la fonctionnalité qui permet aux utilisateurs de voir les tâches par projet, mais modifiez la commande pour voir par projet.
Obtenez le code
Sur GitHub (ce kata peut être fait en C#, Go, Java, Kotlin, Python, Ruby, Scala, TypeScript) Si votre langage préféré est manquant, n'hésitez pas à créer une demande d'extraction. Assurez-vous que le responsable sera satisfait ;-)

Considérations et approches
Pensez à l'attraction du comportement. Très souvent, vous pouvez réduire la quantité de comportement qui dépend des primitives du monde extérieur (par opposition aux primitives internes stockées en tant que champs privés ou locales) simplement en déplaçant le comportement vers un objet de valeur qui détient les primitives. Si vous n'avez pas d'objet de valeur, créez-en un. Ces objets de valeur sont appelés attracteurs de comportement car une fois créés, ils rendent beaucoup plus évident où le comportement devrait vivre.

Un principe connexe est de considérer le type d'objet que vous avez créé. Est-ce un véritable objet de valeur (ou enregistrement), qui se compose simplement de méthodes getFoo qui renvoient leurs primitives internes (à utiliser uniquement avec l'infrastructure, bien sûr), ou est-ce un objet avec un comportement ? Si c'est le dernier, vous devriez éviter de divulguer tout état interne. Le premier ne doit contenir aucun comportement. Traiter quelque chose à la fois comme un enregistrement et un objet conduit généralement à la catastrophe.

Votre approche dépendra de votre inclination vers un style de programmation fonctionnelle ou orientée objet pour modéliser votre domaine. Les deux encouragent l'encapsulation, mais les techniques de dissimulation d'informations ne sont généralement utilisées que dans le code orienté objet. Ils diff